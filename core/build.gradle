plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'

group = 'me.func'
version = '1.0-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib:1.6.0'
    compileOnly 'cristalix:bukkit-core:21.01.30'
    compileOnly 'cristalix:dark-paper:21.02.03'
    compileOnly 'dev.xdark:feder:1.0-SNAPSHOT'
    compileOnly 'dev.implario.games5e:bukkit-worker-core:2.1.20'
    compileOnly 'dev.implario.bukkit:bukkit-tools:4.4.12'
    compileOnly 'dev.implario.bukkit:kotlin-api:1.0.0'
    compileOnly 'dev.implario.bukkit:dark-paper:1.0.0'
    compileOnly 'ru.cristalix:games5e-integration:1.3.23'
}

publishing {
    repositories {
        maven {
            name 'func'
            url 'https://repo.implario.dev/cristalix'
            credentials {
                username System.getenv('IMPLARIO_REPO_USER')
                password System.getenv('IMPLARIO_REPO_PASSWORD')
            }
        }
    }
    def p = project
    publications {
        create(p.name, MavenPublication) {
            it.groupId = 'me.func'
            it.artifactId = 'metaworld-api'
            it.version = 'live-SNAPSHOT'
            it.artifact p.tasks.jar
        }
    }
}

jar {
    from configurations.runtimeClasspath.collect { it.directory ? it : zipTree(it) }
}

afterEvaluate {
    jar {
        archiveBaseName.set 'metaworld-core'
        from configurations.runtimeClasspath.collect { it.directory ? it : zipTree(it) }
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }
}